apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: find-nodeport-
  namespace: argo
spec:
  entrypoint: find-nodeport
  templates:
  - name: find-nodeport
    steps:
    - - name: generate-nodeports
        template: get-nodeports
    - - name: consume-nodeports
        template: print-nodeports
        arguments:
          parameters:
            - name: nodeports 
              value: "{{steps.generate-nodeports.outputs.result}}"
  
  - name: get-nodeports
    script:
      image: pinholuc/gut-sant
      command: [python]
      source: |
        import kubernetes
        from kubernetes import client, config
        import urllib3
        num=2
        ns = "argo"
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        config.load_incluster_config()
        v1 = client.CoreV1Api()
        available_ports = []
        ret = v1.list_namespaced_service(namespace="argo", label_selector="app=sant,available=true")
        for i in ret.items[:num]:
          [available_ports.append(i.spec.ports[j].node_port) for j in range(len(i.spec.ports))]
        print("{'containerPort': 100}")

  - name: print-nodeports
    inputs:
      parameters:
        - name: nodeports
    container:
      image: docker/whalesay:latest
      command: [cowsay]
      args: ["{{inputs.parameters.nodeports}}"]
      #ports: [{'containerPort': $DB_PORT}]
      ports: [{{inputs.parameters.nodeports}}]


