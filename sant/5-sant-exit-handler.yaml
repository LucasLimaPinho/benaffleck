# An exit handler is a template reference that executes at the end of the workflow
# irrespective of the success, failure, or error of the primary workflow. To specify
# an exit handler, reference the name of a template in 'spec.onExit'.
# Some common use cases of exit handlers are:
# - sending notifications of workflow status (e.g. e-mail/slack)
# - posting the pass/fail status to a webhook result (e.g. github build result)
# - cleaning up workflow artifacts
# - resubmitting or submitting another workflow
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: exit-handlers-
  namespace: argo
spec:
  entrypoint: intentional-fail
  onExit: exit-handler
  templates:
  # primary workflow template
  - name: intentional-fail
    steps: 
      - - name: fail
          template: fail 
          continueOn:
            failed: true
      - - name: success 
          template: success

  # exit handler related templates
  # After the completion of the entrypoint template, the status of the
  # workflow is made available in the global variable {{workflow.status}}.
  # {{workflow.status}} will be one of: Succeeded, Failed, Error
  - name: exit-handler
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        import sys
        if {{workflow.failures}} == "null":
          print("{{workflow.name}} was successfull! :)")
          sys.exit(0)
        else:
          print("{{workflow.name}} failed!")
          print("Details about the steps the failed: ")
          print({{workflow.failures}})
          print("You can check the logs in each step.")
          sys.exit(1)

  - name: fail 
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo intentional failure; exit 1"]
  - name: success
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo Success!; exit 0"]